build()
devtools::build()
devtools::load_all(".")
hello
hello()
roxygen2::roxygenize()
devtools::load_all(".")
devtools::load_all(".")
?regressao_linear()
roxygen2::roxygenize()
devtools::load_all(".")
?regressao_linear()
?previsao()
dt <- data.frame(a = 1:100,
b = runif(100, 0, 100))
regressao_linear(a ~ b, dt)
reg <- regressao_linear(a ~ b, dt)
View(reg)
dt2 <- data.frame(b = runif(100, 100, 200))
previsao(reg$coeficientes, )
previsao(reg$coeficientes, dt2)
prev <- previsao(reg$coeficientes, dt2)
devtools::load_all(".")
#' @title Regressão Linear
#'
#' @param formula Uma fórmula representando o modelo de regressão linear.
#' @param data Um data frame contendo as variáveis na fórmula.
#' @return Uma lista contendo coeficientes, resíduos, valores preditos e gráficos.
#' @examples
#' data(mtcars)
#' resultado <- regressao_linear_manual(mpg ~ wt + hp, data = mtcars)
#' plot(resultado$grafico_predito_observado)
#' @export
regressao_linear <- function(formula, data) {
if (!inherits(formula, "formula")) {
stop("A entrada 'formula' deve ser uma fórmula.")
}
if (!is.data.frame(data)) {
stop("A entrada 'data' deve ser um data frame.")
}
response_var <- as.character(formula[[2]])
predictor_vars <- all.vars(formula)[-1]
X <- as.matrix(data[predictor_vars])
X <- cbind(1, X)
y <- as.matrix(data[[response_var]])
beta <- solve(t(X) %*% X) %*% t(X) %*% y
y_hat <- X %*% beta
residuos <- y - y_hat
grafico_predito_observado <- plot(y_hat, y,
xlab = "Valores Preditos",
ylab = "Valores Observados",
main = "Gráfico: Predito vs Observado")
abline(0, 1, col = "red")
resultado <- list(
coeficientes = beta,
residuos = residuos,
valores_preditos = y_hat,
grafico_predito_observado = grafico_predito_observado
)
return(resultado)
}
library(regressao)
library(regressao)
?previsao
?regressao_linear
library(regressao)
system("git init")
system("git remote add origin https://github.com/lucas-antonucci/regressao.git")
system("git add .")
system("git init")
